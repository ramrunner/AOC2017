(import srfi-1)
(require-extension format)

(define myinput


(define inaslist (string->list myinput))


(define (aresame a) 
	 (cond ((pair? a) (if (eq? a (car myinput)) #t ))
	        (else (if (eq? (car a) (cadr a)) #t))))

(define (disppair a)
	  (cond ((pair? a) (format #t "a:~D b:~D ~%" (car a) (cadr a)))))

(define (getnext lst ind jmp) 
          (let ((len (length lst)))
            (list-ref lst (modulo (+ ind jmp) len))))

;this looks halfway accross the list for the neighbors
(define (recnew lst curlst ind acc)
  (if (not (null? curlst))
      (let ((num1 (string->number (string (car curlst))))
            (num2  (string->number (string (getnext lst ind (/ (length lst) 2))))))
        (recnew lst 
                (cdr curlst) 
                (+ 1 ind) 
                (+ acc 
                   (if (eq? num1 num2)
                       num1
                       0))))
        acc))

;this is the original solution for part 1 where it looks at the next element
(define (recpair a fe); keeps the first elem to compare the last to the first as a circ list.
          (cond ((null? a) '())
                 ((null? (cdr a))
                   (cons (if (eq? (car a) fe) (string (car a)) "0") (recpair (cdr a) fe)))
                 (else 
                   (cons (if (eq? (car a) (cadr a)) (string (car a)) "0")  (recpair (cdr a) fe)))))
                 
(format #t "my length: ~D  length of res:~D ~%" (length inaslist) (length (recpair inaslist (car inaslist))))
(display (recnew inaslist inaslist 0 0))

