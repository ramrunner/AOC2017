(import srfi-1)
(import format)
(import (chicken bitwise))
;(import data-structures)

(define (slice l offset n)
  (take (drop l offset) n))

(define (clist->list clist n)
 (if (> n 0)
   (cons (car clist) (clist->list (cdr clist) (- n 1)))
   '()))

(define (countup n) (if (>= n 0) (append (countup (- n 1)) (list n)) '()))

(define (knotlist lst cpos len)
  (let* ((clist (apply circular-list lst))
        (rlist (clist->list (reverse (slice clist cpos len)) len))
        (plen (length lst))
        (wrap (> (+ cpos len) plen))
        (wrapind (modulo (+ cpos len) plen))
        (ret '()))
    (let loop ((i 0))
      (when (< i plen)
        (cond  ((and wrap (< i wrapind))
                (set! ret (append ret (list (list-ref rlist (+ i (- (length rlist) wrapind)))))))
               ((and (>= i cpos) (< i (+ cpos len)))
                (set! ret (append ret (list (list-ref rlist (- i cpos))))))
               (else
                 (set! ret (append ret (list (list-ref lst i))))))
        (loop (+ i 1))))
     ret))
 
(define (dolength plist lengths curpos skipsz)
  (if (null? lengths)
      (list plist curpos skipsz)
    (let* ((len (car lengths))
           (plen (length plist)))
      (dolength (knotlist plist curpos len) (cdr lengths) (modulo (+ curpos skipsz len) plen) (+ 1 skipsz)))))

(define (runloop hm input)
 (let ((res '()))
  (let loop ((i 0))
    (when (< i hm)
      (if (not (null? res))
          (format #f "iteration ~A curpos ~A skpsz ~A~%" i (cadr res) (caddr res)))
      (if (null? res)
        (set! res (dolength (countup 255) input 0 0))
        (set! res (dolength (car res) input (cadr res) (caddr res))))
      (loop (+ 1 i)))
    res)))

;final step
(define knothash (lambda (in)
  (let ((result (car (runloop 64 in))))
    (map (lambda (e) (format #f "~2,,0x" e)) (map (lambda (l) (fold bitwise-xor 0 l)) (chop result 16))))))

(define (despace str)
  (let* ((aslist (string->list str))
         (oc (cadr aslist)))
    (if (eq? (car aslist) #\space)
        (list->string (list #\0 oc))
        str)))

(define (inputToKnotHash in)
  (let* ((str2l (string->list in))
	 (asciinums (char-set->list char-set:ascii))
         (str2nums (map (lambda (c) (index c asciinums)) str2l))
	 (strfinal (append str2nums '(17 31 73 47 23))))
    (knothash strfinal)))

(define myinput '(54 51 44 49 52 52 44 49 56 48 44 49 52 57 44 49 44 50 53 53 44 49 54 55 44 56 52 44 49 50 53 44 54 53 44 49 56 56 44 48 44 50 44 50 53 52 44 50 50 57 44 50 52 17 31 73 47 23))

(define result (knothash myinput))
(format #t "result: ~A~%" result)
