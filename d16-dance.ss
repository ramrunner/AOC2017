(import srfi-1)
(import vector-lib)
(import (chicken string))
(import (chicken io))
(import srfi-69)
(import format)

(define startstate  '(a b c d e f g h i j k l m n o p))
(define teststate '(a b c d e))
(define memo (make-hash-table))

(define (numerifylst lst) (map (lambda (e) (char->integer (string-ref (symbol->string e) 0))) lst))
(define (numberifysymb s) (char->integer (string-ref (symbol->string s) 0))) 

(define (spin lst sz)
  (append (drop lst (- (length lst) sz)) (take lst (- (length lst) sz))))

(define (spinvec  v sz)
  (vector-fold (lambda (i acc e) (vector-swap! v i (modulo (- (vector-length v) (- sz i)) (vector-length v)))) 0 v))

(define (swap lst p1 p2)
  (let ((v (list->vector lst)))
   (vector-swap! v p1 p2)
   (vector->list v)))

(define (partner lst e1 e2)
  ;(format #t "i got called with eq ~A e2  ~A ~N" e1 e2)
  (let* ((v (list->vector lst))
         (i1 (vector-index (lambda (x) (string=? (symbol->string x) (string e1))) v))
         (i2 (vector-index (lambda (x) (string=? (symbol->string x) (string e2))) v)))
     (vector-swap! v i1 i2)
     (vector->list v)))

(define (readinput fname)
  (letrec* ((cmds (string-split (car (read-lines fname)) ","))
        (recur (lambda (lst cmd)
          (if  (not (eq? cmd '()))
            (case (car (string->list (car cmd)))
              ((#\p) (let* ((parts (string-split (list->string (cdr (string->list (car cmd)))) "/")) 
                           (res (partner lst (car (string->list (car parts))) (car (string->list (cadr parts)))))) (recur res (cdr cmd))))
              ((#\x) (let* ((parts (string-split (list->string (cdr (string->list (car cmd)))) "/"))
                           (res  (swap lst (string->number (car parts)) (string->number (cadr parts))))) (recur res (cdr cmd))))
              ((#\s) (let* ((res (spin lst (string->number (list->string (cdr (string->list (car cmd)))))))) (recur res (cdr cmd)))))
            lst)))
         (rerecur (lambda (n lst) 
                   (if (> n 0) 
                       (let* ((solved? (hash-table-exists? memo lst))
                              (res (if solved? (hash-table-ref memo lst) (begin (hash-table-set! memo lst (recur lst cmds)) (hash-table-ref memo lst)))))
                       ;(if solved? (format #t "memo success at n ~A~N" (- 1000000000 n)))
                       (rerecur (- n 1) res)) 
                       lst))))
    (format #t "result ~A ~N" (rerecur 1000000000 startstate))))

(call-with-input-file "inputs/day16" readinput)
