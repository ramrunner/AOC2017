(import (chicken io))
(import (chicken string))
(import srfi-13)
(import format)

(define (readinaslist fname)
  (letrec* ((lines (read-lines fname))
	 (oneline (foldr (lambda (e acc) (append (string->list e) acc)) '() lines))
         (letts '())
         (totsteps 0)
         (lenline (string-length (car lines)))
	 (firstpos (string-index (car lines) #\|))
         (godown (lambda (i) (+ i lenline)))
         (goup   (lambda (i) (- i lenline)))
         (goright (lambda (i) (+ i 1)))
         (goleft (lambda (i) (- i 1)))
         (look (lambda (from towards) 
		(case towards
                  ((up) (not (eq? (list-ref oneline (goup from)) #\ )))
                  ((down) (not (eq? (list-ref oneline (godown from)) #\ )))
                  ((left) (not (eq? (list-ref oneline (goleft from)) #\ )))
                  ((right) (not (eq? (list-ref oneline (goright from)) #\ ))))))
	 (keepgoing (lambda (from towards)
                      (case towards
                        ((up) (goup from))
                        ((down) (godown from))
                        ((left) (goleft from))
                        ((right) (goright from)))))
	 (atcross (lambda (i going)
                   (case going
                     ((up down) (if (look i 'left) (cons (goleft i) 'left) (cons (goright i) 'right)))
                     ((left right) (if (look i 'up) (cons (goup i) 'up) (cons (godown i) 'down))))))
         (walk (lambda (from towards remsteps)
                 (if (and (> remsteps 0) (not (eq? (list-ref oneline from) #\ )))
                     (let ((curchar (list-ref oneline from)))
                       (set! totsteps (+ totsteps 1))
                       (if (eq? (string-index "|-+" curchar) #f)
                          (set! letts (append letts (list curchar))))
		       (if (eq? (list-ref oneline from) #\+)
                          (let ((cresolve (atcross from towards)))
                            (walk (car cresolve) (cdr cresolve) (- remsteps 1)))
                          (walk (keepgoing from towards) towards (- remsteps 1))))))))

   (walk firstpos 'down 100000)
   (format #t "seen: ~A in ~A steps~N~%" letts totsteps)))
(call-with-input-file "inputs/day19" readinaslist)
